from telethon.sync import TelegramClient
from telethon.tl.functions.messages import GetHistoryRequest, DeleteMessagesRequest
from telethon.tl.types import Channel
import asyncio
from dotenv import load_dotenv
import os

load_dotenv()

# –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ .env
api_id = os.getenv('API_ID')
api_hash = os.getenv('API_HASH')
phone_number = os.getenv('PHONE_NUMBER')

client = TelegramClient('classic_session', api_id, api_hash)


async def get_recent_chats(limit=200):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —á–∞—Ç–æ–≤ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π (index, dialog)"""
    await client.start(phone=phone_number)
    all_dialogs = await client.get_dialogs(limit=limit)
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º: –∏—Å–∫–ª—é—á–∞–µ–º –∫–∞–Ω–∞–ª—ã, –Ω–æ –æ—Å—Ç–∞–≤–ª—è–µ–º —Ñ–æ—Ä—É–º—ã –∏ –≥—Ä—É–ø–ø—ã
    dialogs = [d for d in all_dialogs if not d.is_channel or (d.is_channel and (getattr(d, 'forum', False) or d.is_group))]
    
    print("\nüìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ —á–∞—Ç—ã:")
    print("=" * 60)
    for idx, dialog in enumerate(dialogs, 1):
        is_forum = getattr(dialog, 'forum', False)
        if is_forum:
            dialog_type = "üí¨"
        elif dialog.is_group:
            dialog_type = "üë•"
        else:
            dialog_type = "üí¨"
        print(f"{idx}. {dialog_type} {dialog.name} (ID: {dialog.id})")
    print("0. ‚ùå –í—ã—Ö–æ–¥")
    print("=" * 60)
    
    return dialogs


def select_chat(dialogs):
    """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≤—ã–±–æ—Ä —á–∞—Ç–∞"""
    while True:
        try:
            choice = input("\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —á–∞—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π: ").strip()
            choice = int(choice)
            
            if choice == 0:
                print("–í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã.")
                return None
            
            if 1 <= choice <= len(dialogs):
                selected_dialog = dialogs[choice - 1]
                print(f"\n–í—ã–±—Ä–∞–Ω–æ: {selected_dialog.name}")
                return selected_dialog.id
            else:
                print(f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ {len(dialogs)} –∏–ª–∏ 0 –¥–ª—è –≤—ã—Ö–æ–¥–∞.")
        except ValueError:
            print("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
        except KeyboardInterrupt:
            print("\n\n–í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã.")
            return None


async def delete_own_messages(chat):
    entity = await client.get_entity(chat)
    my_id = (await client.get_me()).id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ —Ñ–æ—Ä—É–º–æ–º (–≥—Ä—É–ø–ø–æ–π —Å —Ç–æ–ø–∏–∫–∞–º–∏)
    is_forum = isinstance(entity, Channel) and getattr(entity, 'forum', False)
    
    if is_forum:
        # –î–ª—è —Ñ–æ—Ä—É–º–Ω—ã—Ö –≥—Ä—É–ø–ø —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –æ–¥–Ω–æ–º—É
        print("üí¨ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä—É–º–Ω–æ–π –≥—Ä—É–ø–ø—ã...")
        total_deleted = 0
        async for message in client.iter_messages(entity):
            if message.from_id and getattr(message.from_id, 'user_id', None) == my_id:
                try:
                    await message.delete(revoke=True)
                    total_deleted += 1
                    if total_deleted % 10 == 0:
                        print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ {total_deleted} —Å–æ–æ–±—â–µ–Ω–∏–π...")
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è {message.id}: {e}")
    else:
        # –î–ª—è –æ–±—ã—á–Ω—ã—Ö —á–∞—Ç–æ–≤/–∫–∞–Ω–∞–ª–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ
        total_deleted = 0
        offset_id = 0
        
        while True:
            history = await client(GetHistoryRequest(
                peer=entity,
                offset_id=offset_id,
                offset_date=None,
                add_offset=0,
                limit=100,
                max_id=0,
                min_id=0,
                hash=0
            ))
            
            messages = history.messages
            if not messages:
                break
            
            own_msg_ids = [
                msg.id for msg in messages 
                if msg.from_id and getattr(msg.from_id, 'user_id', None) == my_id
            ]
            
            if own_msg_ids:
                try:
                    await client(DeleteMessagesRequest(id=own_msg_ids, revoke=True))
                    total_deleted += len(own_msg_ids)
                    print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ {len(own_msg_ids)} —Å–æ–æ–±—â–µ–Ω–∏–π (–≤—Å–µ–≥–æ: {total_deleted})")
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –±–∞—Ç—á–∞: {e}")
            
            offset_id = messages[-1].id
    
    print(f"‚úÖ –ì–æ—Ç–æ–≤–æ. –í—Å–µ–≥–æ —É–¥–∞–ª–µ–Ω–æ: {total_deleted} —Å–æ–æ–±—â–µ–Ω–∏–π.")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    # –≠—Ç–∞–ø 1: –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ –∏ –≤—ã–±—Ä–∞—Ç—å
    dialogs = await get_recent_chats()
    selected_chat_id = select_chat(dialogs)
    
    if selected_chat_id is None:
        return
    
    # –≠—Ç–∞–ø 2: –£–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è
    await delete_own_messages(selected_chat_id)


if __name__ == "__main__":
    with client:
        client.loop.run_until_complete(main())